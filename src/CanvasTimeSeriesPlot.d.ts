import * as d3 from 'd3';
import * as d3Axis from 'd3-axis';
import * as d3Zoom from 'd3-zoom';
export declare class CanvasTimeSeriesPlot {
    parent: d3.Selection<any, {}, HTMLElement, {}>;
    canvasDimensions: Array<number>;
    config: CanvasTimeSeriesPlot.Config;
    data: Array<{
        xDate: Date;
        yNum: number;
    }>;
    dataIDs: Array<string>;
    dataLabels: Array<string>;
    displayIndexStart: Array<number>;
    displayIndexEnd: Array<number>;
    dataColors: Array<string>;
    xAxisLabelText: string;
    yAxisLabelText: string;
    updateViewCallback: undefined;
    zoom: d3Zoom.ZoomBehavior<Element, any>;
    disableLegend: boolean;
    invertYAxis: boolean;
    gridColor: string;
    markerLineWidth: number;
    markerRadius: number;
    xTicksPerPixel: number;
    yTicksPerPixel: number;
    minCanvasWidth: number;
    minCanvasHeight: number;
    legendMargin: number;
    legendXPadding: number;
    legendYPadding: number;
    legendLineHeight: number;
    margin: CanvasTimeSeriesPlot.PlotMargins;
    showToolstips: boolean;
    tooltipRadiusSquared: number;
    totalWidth: number;
    totalHeight: number;
    width: number;
    legendWidth: number;
    height: number;
    zoomListener: any;
    div: d3.Selection<any, {}, any, {}>;
    d3Canvas: d3.Selection<any, {}, any, {}>;
    canvas: CanvasRenderingContext2D;
    svg: d3.Selection<any, {}, any, {}>;
    svgTranslateGroup: d3.Selection<any, {}, any, {}>;
    xScale: d3Axis.AxisScale<Date>;
    yScale: d3Axis.AxisScale<number>;
    xAxis: d3Axis.Axis<d3Axis.AxisDomain>;
    yAxis: d3Axis.Axis<d3Axis.AxisDomain>;
    xAxisLabel: d3.Selection<SVGTextElement, {}, any, {}>;
    yAxisLabel: d3.Selection<SVGTextElement, {}, any, {}>;
    yAxisGroup: d3.Selection<any, {}, any, {}>;
    xAxisGroup: d3.Selection<any, {}, any, {}>;
    tooltip: d3.Selection<any, {}, any, {}>;
    legend: d3.Selection<any, {}, any, {}>;
    legendBG: any;
    showTooltips: boolean;
    xAxisZoom: boolean;
    yAxisZoom: boolean;
    informationDensity: Array<number>;
    plotLineWidth: number;
    maxInformationDensity: number;
    showMarkerDensity: number;
    constructor(parentElement: d3.Selection<any, {}, HTMLElement, {}>, canvasDimensions: Array<number>, config?: CanvasTimeSeriesPlot.Config);
    addDataSet(uniqueID: string, label: string, dataSet: Array<{
        xDate: Date;
        yNum: number;
    }>, colorString: string, updateDomains: boolean, copyData?: boolean): void;
    resize(dimensions: Array<number>): void;
    updateDomains(xDomain: Array<Date>, yDomain: Array<number>, makeItNice: boolean): void;
    drawCanvas(): void;
    drawDataSet(): void;
    updateLegend(): void;
    drawGrid(): void;
    removeDataSet(uniqueID: string): void;
    calculateXDomain(): Array<Date>;
    calculateYDomain(): Array<number>;
    destroy(): void;
    updateDisplayIndices(): void;
    removeTooltip(): void;
    updateTooltip(): void;
    showTooltip(position: Array<number>, color: string, xText: string, yText: string): void;
    getTooltipStringX(dataPoint: [Date, number]): string;
    getTooltipStringY(dataPoint: [Date, number]): string;
    addDays(date: Date, days: number): Date;
    randomDate(start: Date, end: Date): Date;
    getRandomInt(max: number): number;
    setupXScaleAndAxis(): void;
    setupYScaleAndAxis(): void;
}
export declare namespace CanvasTimeSeriesPlot {
    interface Config {
        xAxisLabel?: string;
        yAxisLabel?: string;
        markerLineWidth?: number;
        markerRadius?: number;
        updateViewCallback?: undefined;
        disableLegend?: boolean;
        invertYAxis?: boolean;
        gridColor?: string;
        xTicksPerPixel?: number;
        yTicksPerPixel?: number;
        minCanvasWidth?: number;
        minCanvasHeight?: number;
        legendMargin?: number;
        legendXPadding?: number;
        legendYPadding?: number;
        legendLineHeight?: number;
        plotMargins?: PlotMargins;
        showToolstips?: boolean;
        hasOwnProperty?(prop: string): boolean;
        tooltipRadius?: number;
        plotLineWidth?: number;
        maxInformationDensity?: number;
        showMarkerDensity?: number;
        vectorScale?: number;
        scaleUnits?: string;
        scaleLength?: number;
    }
    interface PlotMargins {
        top?: number;
        right?: number;
        bottom?: number;
        left?: number;
    }
}
export declare type LineType = {
    xDate: Date;
    yNum: number;
};
